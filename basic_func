
# Spatial-Temporal Attention Module
class STAM(nn.Module):
    def __init__(self, in_dim):
        super(STA, self).__init__()
        self.chanel_in = in_dim

        self.query_conv1 = nn.Conv2d(in_channels=in_dim, out_channels=in_dim, kernel_size=1)
        self.key_conv1 = nn.Conv2d(in_channels=in_dim, out_channels=in_dim, kernel_size=1)
        self.value_conv1 = nn.Conv2d(in_channels=in_dim, out_channels=in_dim, kernel_size=1)
        self.conv1 = nn.Conv2d(in_channels=in_dim, out_channels=in_dim, kernel_size=1)

        self.query_conv2 = nn.Conv2d(in_channels=in_dim, out_channels=in_dim, kernel_size=1)
        self.key_conv2 = nn.Conv2d(in_channels=in_dim, out_channels=in_dim, kernel_size=1)
        self.value_conv2 = nn.Conv2d(in_channels=in_dim, out_channels=in_dim, kernel_size=1)
        self.conv2 = nn.Conv2d(in_channels=in_dim, out_channels=in_dim, kernel_size=1)

        self.gamma1 = nn.Parameter(torch.zeros(1))
        self.gamma2 = nn.Parameter(torch.zeros(1))

        self.softmax = nn.Softmax(dim=-1)

        self.dwc1 = nn.Conv2d(in_channels=in_dim, out_channels=in_dim, kernel_size=1, groups=in_dim)
        self.dwc2 = nn.Conv2d(in_channels=in_dim, out_channels=in_dim, kernel_size=1, groups=in_dim)

    def linear_attention(self, q, k, v, focusing_factor=3):
        kernel_funcation = nn.ReLU()

        q = kernel_funcation(q) + 1e-6
        k = kernel_funcation(k) + 1e-6

        q_norm = q.norm(dim=-1, keepdim=True)
        k_norm = k.norm(dim=-1, keepdim=True)

        q = q ** focusing_factor
        k = k ** focusing_factor
        q = (q / q.norm(dim=-1, keepdim=True)) * q_norm
        k = (k / k.norm(dim=-1, keepdim=True)) * k_norm

        kv = torch.bmm(v, k.permute(0, 2, 1))

        attention = torch.bmm(q, kv.permute(0, 2, 1))
        return attention

    def forward(self, x1, x2):
        m_batchsize, C, height, width = x1.size()

        q1 = self.query_conv1(x1).view(m_batchsize, self.chanel_in, -1).permute(0, 2, 1)
        k1 = self.key_conv1(x1).view(m_batchsize, -1, width * height)
        v1 = self.value_conv1(x1).view(m_batchsize, -1, width * height)

        q2 = self.query_conv2(x2).view(m_batchsize, self.chanel_in, -1).permute(0, 2, 1)
        k2 = self.key_conv2(x2).view(m_batchsize, -1, width * height)
        v2 = self.value_conv2(x2).view(m_batchsize, -1, width * height)

        out1 = self.linear_attention(q1, k2, v1)
        out1 = out1.view(m_batchsize, C, height, width)

        out2 = self.linear_attention(q2, k1, v2)
        out2 = out2.view(m_batchsize, C, height, width)

        v1 = v1.permute(0, 2, 1).reshape(m_batchsize, C, height, width)
        v2 = v2.permute(0, 2, 1).reshape(m_batchsize, C, height, width)

        out1 = out1 + self.dwc1(v1)
        out2 = out2 + self.dwc2(v2)

        out1 = x1 + self.gamma1 * out1
        out2 = x2 + self.gamma2 * out2

        return out1, out2
